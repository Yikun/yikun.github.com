##############################################################################
##############################################################################
###
### Running command:
###
###   /home/biocbuild/bbs-3.17-bioc/R/bin/R CMD check --install=check:Biostrings.install-out.txt --library=/home/biocbuild/bbs-3.17-bioc/R/site-library --timings Biostrings_2.67.0.tar.gz
###
##############################################################################
##############################################################################


* using log directory ‘/home/biocbuild/bbs-3.17-bioc/meat/Biostrings.Rcheck’
* using R Under development (unstable) (2023-03-12 r83975)
* using platform: aarch64-unknown-linux-gnu (64-bit)
* R was compiled by
    gcc (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0
    GNU Fortran (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0
* running under: Ubuntu 22.04.2 LTS
* using session charset: UTF-8
* checking for file ‘Biostrings/DESCRIPTION’ ... OK
* this is package ‘Biostrings’ version ‘2.67.0’
* package encoding: UTF-8
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking for sufficient/correct file permissions ... OK
* checking whether package ‘Biostrings’ can be installed ... OK
* used C compiler: ‘gcc (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0’
* checking installed package size ... NOTE
  installed size is 14.6Mb
  sub-directories of 1Mb or more:
    R         1.7Mb
    extdata  11.1Mb
* checking package directory ... OK
* checking ‘build’ directory ... OK
* checking DESCRIPTION meta-information ... NOTE
Package listed in more than one of Depends, Imports, Suggests, Enhances:
  ‘methods’
A package should be listed in only one of these fields.
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking R files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking startup messages can be suppressed ... OK
* checking dependencies in R code ... NOTE
Unexported objects imported by ':::' calls:
  ‘BiocGenerics:::testPackage’ ‘IRanges:::.showAtomicList’
  ‘IRanges:::from_Vector_to_CompressedList’
  ‘IRanges:::new_CompressedList_from_list’ ‘IRanges:::new_Views’
  ‘IRanges:::regroupBySupergroup’ ‘IRanges:::show_IntegerRangesList’
  ‘IRanges:::unlist_as_integer’ ‘S4Vectors:::anyMissingOrOutside’
  ‘XVector:::close_filexp’
  ‘XVector:::extract_character_from_XRaw_by_positions’
  ‘XVector:::extract_character_from_XRaw_by_ranges’
  ‘XVector:::new_XVectorList_from_list_of_XVector’
  ‘XVector:::open_output_file’
  See the note in ?`:::` about the use of this operator.
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... OK
* checking Rd files ... WARNING
checkRd: (5) AAString-class.Rd:74-78: \item in \describe must have non-empty label
checkRd: (5) AAString-class.Rd:86-92: \item in \describe must have non-empty label
checkRd: (5) AlignedXStringSet-class.Rd:87-90: \item in \describe must have non-empty label
checkRd: (5) AlignedXStringSet-class.Rd:91-96: \item in \describe must have non-empty label
checkRd: (5) AlignedXStringSet-class.Rd:97-99: \item in \describe must have non-empty label
checkRd: (5) AlignedXStringSet-class.Rd:100-103: \item in \describe must have non-empty label
checkRd: (5) AlignedXStringSet-class.Rd:104-107: \item in \describe must have non-empty label
checkRd: (5) AlignedXStringSet-class.Rd:108-111: \item in \describe must have non-empty label
checkRd: (5) AlignedXStringSet-class.Rd:112-116: \item in \describe must have non-empty label
checkRd: (5) AlignedXStringSet-class.Rd:117-121: \item in \describe must have non-empty label
checkRd: (5) AlignedXStringSet-class.Rd:122-125: \item in \describe must have non-empty label
checkRd: (5) AlignedXStringSet-class.Rd:126-129: \item in \describe must have non-empty label
checkRd: (5) AlignedXStringSet-class.Rd:130-133: \item in \describe must have non-empty label
checkRd: (5) AlignedXStringSet-class.Rd:134-137: \item in \describe must have non-empty label
checkRd: (5) AlignedXStringSet-class.Rd:138-141: \item in \describe must have non-empty label
checkRd: (5) AlignedXStringSet-class.Rd:147-151: \item in \describe must have non-empty label
checkRd: (5) AlignedXStringSet-class.Rd:152-156: \item in \describe must have non-empty label
checkRd: (5) DNAString-class.Rd:57-61: \item in \describe must have non-empty label
checkRd: (5) DNAString-class.Rd:69-75: \item in \describe must have non-empty label
checkRd: (5) InDel-class.Rd:32-35: \item in \describe must have non-empty label
checkRd: (5) InDel-class.Rd:36-39: \item in \describe must have non-empty label
checkRd: (5) MIndex-class.Rd:49-52: \item in \describe must have non-empty label
checkRd: (5) MIndex-class.Rd:53-56: \item in \describe must have non-empty label
checkRd: (5) MIndex-class.Rd:57-61: \item in \describe must have non-empty label
checkRd: (5) MIndex-class.Rd:62-66: \item in \describe must have non-empty label
checkRd: (5) MIndex-class.Rd:67-71: \item in \describe must have non-empty label
checkRd: (5) MIndex-class.Rd:79-83: \item in \describe must have non-empty label
checkRd: (5) MIndex-class.Rd:91-99: \item in \describe must have non-empty label
checkRd: (5) MIndex-class.Rd:110-115: \item in \describe must have non-empty label
checkRd: (5) MIndex-class.Rd:116-119: \item in \describe must have non-empty label
checkRd: (5) MaskedXString-class.Rd:113-116: \item in \describe must have non-empty label
checkRd: (5) MaskedXString-class.Rd:117-122: \item in \describe must have non-empty label
checkRd: (5) MaskedXString-class.Rd:123-140: \item in \describe must have non-empty label
checkRd: (5) MaskedXString-class.Rd:141-145: \item in \describe must have non-empty label
checkRd: (5) MaskedXString-class.Rd:146-152: \item in \describe must have non-empty label
checkRd: (5) MaskedXString-class.Rd:160-164: \item in \describe must have non-empty label
checkRd: (5) MaskedXString-class.Rd:165-168: \item in \describe must have non-empty label
checkRd: (5) MaskedXString-class.Rd:169-172: \item in \describe must have non-empty label
checkRd: (5) MaskedXString-class.Rd:180-185: \item in \describe must have non-empty label
checkRd: (5) MaskedXString-class.Rd:193-197: \item in \describe must have non-empty label
checkRd: (5) MaskedXString-class.Rd:198-203: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:157-161: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:162-167: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:168-178: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:179-189: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:190-200: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:201-216: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:217-220: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:221-224: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:225-228: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:229-232: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:233-236: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:237-240: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:241-244: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:245-249: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:250-253: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:261-267: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:268-274: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:275-282: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:290-298: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:299-304: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:305-312: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:313-320: \item in \describe must have non-empty label
checkRd: (5) MultipleAlignment-class.Rd:321-337: \item in \describe must have non-empty label
checkRd: (5) PDict-class.Rd:241-244: \item in \describe must have non-empty label
checkRd: (5) PDict-class.Rd:245-249: \item in \describe must have non-empty label
checkRd: (5) PDict-class.Rd:250-253: \item in \describe must have non-empty label
checkRd: (5) PDict-class.Rd:254-257: \item in \describe must have non-empty label
checkRd: (5) PDict-class.Rd:258-261: \item in \describe must have non-empty label
checkRd: (5) PDict-class.Rd:262-269: \item in \describe must have non-empty label
checkRd: (5) PDict-class.Rd:270-273: \item in \describe must have non-empty label
checkRd: (5) PDict-class.Rd:282-285: \item in \describe must have non-empty label
checkRd: (5) PDict-class.Rd:294-297: \item in \describe must have non-empty label
checkRd: (5) PDict-class.Rd:298-301: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:154-160: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:161-165: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:166-169: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:177-180: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:181-187: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:188-193: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:202-210: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:211-214: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:215-218: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:219-222: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:230-234: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:235-238: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:239-243: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:244-250: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:258-262: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:263-268: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:269-274: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:275-279: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:280-283: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:284-289: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:295-299: \item in \describe must have non-empty label
checkRd: (5) PairwiseAlignments-class.Rd:300-304: \item in \describe must have non-empty label
checkRd: (5) QualityScaledXStringSet-class.Rd:111-114: \item in \describe must have non-empty label
checkRd: (5) QualityScaledXStringSet-class.Rd:115-119: \item in \describe must have non-empty label
checkRd: (5) QualityScaledXStringSet-class.Rd:120-123: \item in \describe must have non-empty label
checkRd: (5) QualityScaledXStringSet-class.Rd:124-129: \item in \describe must have non-empty label
checkRd: (5) QualityScaledXStringSet-class.Rd:130-133: \item in \describe must have non-empty label
checkRd: (5) QualityScaledXStringSet-class.Rd:143-146: \item in \describe must have non-empty label
checkRd: (5) RNAString-class.Rd:55-59: \item in \describe must have non-empty label
checkRd: (5) RNAString-class.Rd:67-73: \item in \describe must have non-empty label
checkRd: (5) XString-class.Rd:94-98: \item in \describe must have non-empty label
checkRd: (5) XString-class.Rd:106-111: \item in \describe must have non-empty label
checkRd: (5) XString-class.Rd:112-115: \item in \describe must have non-empty label
checkRd: (5) XString-class.Rd:123-126: \item in \describe must have non-empty label
checkRd: (5) XString-class.Rd:127-130: \item in \describe must have non-empty label
checkRd: (5) XString-class.Rd:138-148: \item in \describe must have non-empty label
checkRd: (5) XString-class.Rd:156-169: \item in \describe must have non-empty label
checkRd: (5) XString-class.Rd:170-173: \item in \describe must have non-empty label
checkRd: (5) XStringPartialMatches-class.Rd:32-35: \item in \describe must have non-empty label
checkRd: (5) XStringPartialMatches-class.Rd:36-39: \item in \describe must have non-empty label
checkRd: (5) XStringPartialMatches-class.Rd:49-54: \item in \describe must have non-empty label
checkRd: (-1) XStringQuality-class.Rd:86: Escaped LaTeX specials: \#
checkRd: (5) XStringQuality-class.Rd:106-109: \item in \describe must have non-empty label
checkRd: (5) XStringQuality-class.Rd:111-115: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:116-118: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:119-121: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:122-124: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:135-138: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:139-145: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:146-155: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:156-162: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:163-166: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:176-193: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:194-204: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:205-215: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:216-221: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:231-234: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:235-238: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:239-242: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:251-254: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:255-258: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:259-262: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:263-266: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:275-280: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:281-286: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:287-290: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:291-298: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:299-302: \item in \describe must have non-empty label
checkRd: (5) XStringSet-class.Rd:303-311: \item in \describe must have non-empty label
checkRd: (5) XStringSet-comparison.Rd:55-65: \item in \describe must have non-empty label
checkRd: (5) XStringSet-comparison.Rd:66-72: \item in \describe must have non-empty label
checkRd: (5) XStringSet-comparison.Rd:80-85: \item in \describe must have non-empty label
checkRd: (5) XStringSet-comparison.Rd:86-90: \item in \describe must have non-empty label
checkRd: (5) XStringSet-comparison.Rd:91-94: \item in \describe must have non-empty label
checkRd: (5) XStringSet-comparison.Rd:95-98: \item in \describe must have non-empty label
checkRd: (5) XStringSet-comparison.Rd:106-109: \item in \describe must have non-empty label
checkRd: (5) XStringSet-comparison.Rd:110-113: \item in \describe must have non-empty label
checkRd: (5) XStringSet-comparison.Rd:122-126: \item in \describe must have non-empty label
checkRd: (5) XStringSet-comparison.Rd:127-131: \item in \describe must have non-empty label
checkRd: (5) XStringSet-comparison.Rd:141-143: \item in \describe must have non-empty label
checkRd: (5) XStringSet-comparison.Rd:144-146: \item in \describe must have non-empty label
checkRd: (5) XStringViews-class.Rd:73-77: \item in \describe must have non-empty label
checkRd: (5) XStringViews-class.Rd:87-93: \item in \describe must have non-empty label
checkRd: (5) XStringViews-class.Rd:103-117: \item in \describe must have non-empty label
checkRd: (5) XStringViews-class.Rd:118-121: \item in \describe must have non-empty label
checkRd: (5) XStringViews-class.Rd:122-131: \item in \describe must have non-empty label
checkRd: (5) XStringViews-class.Rd:136-143: \item in \describe must have non-empty label
checkRd: (5) XStringViews-class.Rd:144-147: \item in \describe must have non-empty label
checkRd: (5) injectHardMask.Rd:58-61: \item in \describe must have non-empty label
checkRd: (5) injectHardMask.Rd:62-70: \item in \describe must have non-empty label
checkRd: (5) injectHardMask.Rd:71-74: \item in \describe must have non-empty label
checkRd: (-1) matchLRPatterns.Rd:65: Escaped LaTeX specials: \_ \_
checkRd: (-1) matchProbePair.Rd:53: Escaped LaTeX specials: \_ \_
checkRd: (-1) matchProbePair.Rd:54: Escaped LaTeX specials: \_ \_
checkRd: (-1) matchProbePair.Rd:55: Escaped LaTeX specials: \_ \_
checkRd: (-1) matchProbePair.Rd:56: Escaped LaTeX specials: \_ \_
checkRd: (-1) phiX174Phage.Rd:18: Escaped LaTeX specials: \_
* checking Rd metadata ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... WARNING
Undocumented code objects:
  ‘strsplit’ ‘twoWayAlphabetFrequency’
Undocumented S4 methods:
  generic 'match' and siglist 'Vector,XStringSet'
  generic 'match' and siglist 'XStringSet,Vector'
  generic 'match' and siglist 'XStringSet,vector'
  generic 'match' and siglist 'vector,XStringSet'
  generic 'parallel_slot_names' and siglist 'ByPos_MIndex'
  generic 'parallel_slot_names' and siglist 'MIndex'
  generic 'pcompare' and siglist 'Vector,XStringSet'
  generic 'pcompare' and siglist 'XStringSet,Vector'
  generic 'pcompare' and siglist 'XStringSet,vector'
  generic 'pcompare' and siglist 'vector,XStringSet'
  generic 'relistToClass' and siglist 'XString'
  generic 'strsplit' and siglist 'XStringSet'
  generic 'twoWayAlphabetFrequency' and siglist 'XString,XString'
  generic 'twoWayAlphabetFrequency' and siglist 'XString,XStringSet'
  generic 'twoWayAlphabetFrequency' and siglist 'XStringSet,XString'
  generic 'twoWayAlphabetFrequency' and siglist 'XStringSet,XStringSet'
  generic 'unstrsplit' and siglist 'XStringSet'
  generic 'unstrsplit' and siglist 'XStringSetList'
All user-level objects in a package (including S4 classes and methods)
should have documentation entries.
See chapter ‘Writing R documentation files’ in the ‘Writing R
Extensions’ manual.
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... OK
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking contents of ‘data’ directory ... OK
* checking data for non-ASCII characters ... OK
* checking data for ASCII and uncompressed saves ... OK
* checking line endings in C/C++/Fortran sources/headers ... OK
* checking compiled code ... NOTE
Note: information on .o files is not available
* checking files in ‘vignettes’ ... OK
* checking examples ... ERROR
Running examples in ‘Biostrings-Ex.R’ failed
The error most likely occurred in:

> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: matchPDict
> ### Title: Matching a dictionary of patterns against a reference
> ### Aliases: matchPDict-exact matchPDict matchPDict,XString-method
> ###   matchPDict,XStringSet-method matchPDict,XStringViews-method
> ###   matchPDict,MaskedXString-method countPDict countPDict,XString-method
> ###   countPDict,XStringSet-method countPDict,XStringViews-method
> ###   countPDict,MaskedXString-method whichPDict whichPDict,XString-method
> ###   whichPDict,XStringSet-method whichPDict,XStringViews-method
> ###   whichPDict,MaskedXString-method vmatchPDict vmatchPDict,ANY-method
> ###   vmatchPDict,XString-method vmatchPDict,MaskedXString-method
> ###   vcountPDict vcountPDict,XString-method vcountPDict,XStringSet-method
> ###   vcountPDict,XStringViews-method vcountPDict,MaskedXString-method
> ###   vwhichPDict vwhichPDict,XString-method vwhichPDict,XStringSet-method
> ###   vwhichPDict,XStringViews-method vwhichPDict,MaskedXString-method
> ###   extractAllMatches
> ### Keywords: methods
> 
> ### ** Examples
> 
> ## ---------------------------------------------------------------------
> ## A. A SIMPLE EXAMPLE OF EXACT MATCHING
> ## ---------------------------------------------------------------------
> 
> ## Creating the pattern dictionary:
> library(drosophila2probe)
Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

> dict0 <- DNAStringSet(drosophila2probe)
> dict0                                # The original dictionary.
DNAStringSet object of length 265400:
         width seq
     [1]    25 CCTGAATCCTGGCAATGTCATCATC
     [2]    25 ATCCTGGCAATGTCATCATCAATGG
     [3]    25 ATCAGTTGTCAACGGCTAATACGCG
     [4]    25 ATCAATGGCGATTGCCGCGTCTGCA
     [5]    25 CCGCGTCTGCAATGTGAGGGCCTAA
     ...   ... ...
[265396]    25 TACTACTTGAGCCACAACCATCTGA
[265397]    25 AGGGACTAAAGAGGCCCCATGCTCT
[265398]    25 CATGCTCTGTCTGGTGTCAGCGCTA
[265399]    25 GTCAGCGCTACATGGTCCAGGACAA
[265400]    25 CCAGGACAAGTATGGACTTCCCCAC
> length(dict0)                        # Hundreds of thousands of patterns.
[1] 265400
> pdict0 <- PDict(dict0)               # Store the original dictionary in
>                                      # a PDict object (preprocessing).
> 
> ## Using the pattern dictionary on chromosome 3R:
> library(BSgenome.Dmelanogaster.UCSC.dm3)
Loading required package: BSgenome
Loading required package: GenomicRanges
Loading required package: rtracklayer
> chr3R <- Dmelanogaster$chr3R         # Load chromosome 3R
> chr3R
27905053-letter DNAString object
seq: GAATTCTCTCTTGTTGTAGTCTCTTGACAAAATGCA...TATGTCGCAGCGTGACTGTTCGCATTCTAGGAATTC
> mi0 <- matchPDict(pdict0, chr3R)     # Search...
> 
> ## Looking at the matches:
> start_index <- startIndex(mi0)       # Get the start index.
> length(start_index)                  # Same as the original dictionary.
[1] 265400
> start_index[[8220]]                  # Starts of the 8220th pattern.
[1]  6788511  9806158 23620037
> end_index <- endIndex(mi0)           # Get the end index.
> end_index[[8220]]                    # Ends of the 8220th pattern.
[1]  6788535  9806182 23620061
> nmatch_per_pat <- elementNROWS(mi0)  # Get the number of matches per pattern.
> nmatch_per_pat[[8220]]
[1] 3
> mi0[[8220]]                          # Get the matches for the 8220th pattern.
IRanges object with 3 ranges and 0 metadata columns:
          start       end     width
      <integer> <integer> <integer>
  [1]   6788511   6788535        25
  [2]   9806158   9806182        25
  [3]  23620037  23620061        25
> start(mi0[[8220]])                   # Equivalent to startIndex(mi0)[[8220]].
[1]  6788511  9806158 23620037
> sum(nmatch_per_pat)                  # Total number of matches.
[1] 32993
> table(nmatch_per_pat)
nmatch_per_pat
     0      1      2      3      4      5      6      7      8      9     10 
233623  31208    341     42     92     44     21      3      8      4     13 
    12 
     1 
> i0 <- which(nmatch_per_pat == max(nmatch_per_pat))
> pdict0[[i0]]                         # The pattern with most occurrences.
25-letter DNAString object
seq: AAGGAAGTTGCACGCTGCACTGTCG
> mi0[[i0]]                            # Its matches as an IRanges object.
IRanges object with 12 ranges and 0 metadata columns:
           start       end     width
       <integer> <integer> <integer>
   [1]  27806218  27806242        25
   [2]  27806784  27806808        25
   [3]  27807348  27807372        25
   [4]  27807630  27807654        25
   [5]  27807912  27807936        25
   ...       ...       ...       ...
   [8]  27809042  27809066        25
   [9]  27809325  27809349        25
  [10]  27809607  27809631        25
  [11]  27809889  27809913        25
  [12]  27810997  27811021        25
> Views(chr3R, mi0[[i0]])              # And as an XStringViews object.
Views on a 27905053-letter DNAString subject
subject: GAATTCTCTCTTGTTGTAGTCTCTTGACAAAATG...TGTCGCAGCGTGACTGTTCGCATTCTAGGAATTC
views:
          start      end width
   [1] 27806218 27806242    25 [AAGGAAGTTGCACGCTGCACTGTCG]
   [2] 27806784 27806808    25 [AAGGAAGTTGCACGCTGCACTGTCG]
   [3] 27807348 27807372    25 [AAGGAAGTTGCACGCTGCACTGTCG]
   [4] 27807630 27807654    25 [AAGGAAGTTGCACGCTGCACTGTCG]
   [5] 27807912 27807936    25 [AAGGAAGTTGCACGCTGCACTGTCG]
   ...      ...      ...   ... ...
   [8] 27809042 27809066    25 [AAGGAAGTTGCACGCTGCACTGTCG]
   [9] 27809325 27809349    25 [AAGGAAGTTGCACGCTGCACTGTCG]
  [10] 27809607 27809631    25 [AAGGAAGTTGCACGCTGCACTGTCG]
  [11] 27809889 27809913    25 [AAGGAAGTTGCACGCTGCACTGTCG]
  [12] 27810997 27811021    25 [AAGGAAGTTGCACGCTGCACTGTCG]
> 
> ## Get the coverage of the original subject:
> cov3R <- as.integer(coverage(mi0, width=length(chr3R)))
> max(cov3R)
[1] 10
> mean(cov3R)
[1] 0.02955827
> sum(cov3R != 0) / length(cov3R)      # Only 2.44% of chr3R is covered.
[1] 0.02441407
> if (interactive()) {
+   plotCoverage <- function(cx, start, end)
+   {
+     plot.new()
+     plot.window(c(start, end), c(0, 20))
+     axis(1)
+     axis(2)
+     axis(4)
+     lines(start:end, cx[start:end], type="l")
+   }
+   plotCoverage(cov3R, 27600000, 27900000)
+ }
> 
> ## ---------------------------------------------------------------------
> ## B. NAMING THE PATTERNS
> ## ---------------------------------------------------------------------
> 
> ## The names of the original patterns, if any, are propagated to the
> ## PDict and MIndex objects:
> names(dict0) <- mkAllStrings(letters, 4)[seq_len(length(dict0))]
> dict0
DNAStringSet object of length 265400:
         width seq                                          names               
     [1]    25 CCTGAATCCTGGCAATGTCATCATC                    aaaa
     [2]    25 ATCCTGGCAATGTCATCATCAATGG                    aaab
     [3]    25 ATCAGTTGTCAACGGCTAATACGCG                    aaac
     [4]    25 ATCAATGGCGATTGCCGCGTCTGCA                    aaad
     [5]    25 CCGCGTCTGCAATGTGAGGGCCTAA                    aaae
     ...   ... ...
[265396]    25 TACTACTTGAGCCACAACCATCTGA                    pcpn
[265397]    25 AGGGACTAAAGAGGCCCCATGCTCT                    pcpo
[265398]    25 CATGCTCTGTCTGGTGTCAGCGCTA                    pcpp
[265399]    25 GTCAGCGCTACATGGTCCAGGACAA                    pcpq
[265400]    25 CCAGGACAAGTATGGACTTCCCCAC                    pcpr
> dict0[["abcd"]]
25-letter DNAString object
seq: CCTCTCAGAGAAACCCACACAAAAA
> pdict0n <- PDict(dict0)
> names(pdict0n)[1:30]
 [1] "aaaa" "aaab" "aaac" "aaad" "aaae" "aaaf" "aaag" "aaah" "aaai" "aaaj"
[11] "aaak" "aaal" "aaam" "aaan" "aaao" "aaap" "aaaq" "aaar" "aaas" "aaat"
[21] "aaau" "aaav" "aaaw" "aaax" "aaay" "aaaz" "aaba" "aabb" "aabc" "aabd"
> pdict0n[["abcd"]]
25-letter DNAString object
seq: CCTCTCAGAGAAACCCACACAAAAA
> mi0n <- matchPDict(pdict0n, chr3R)
> names(mi0n)[1:30]
 [1] "aaaa" "aaab" "aaac" "aaad" "aaae" "aaaf" "aaag" "aaah" "aaai" "aaaj"
[11] "aaak" "aaal" "aaam" "aaan" "aaao" "aaap" "aaaq" "aaar" "aaas" "aaat"
[21] "aaau" "aaav" "aaaw" "aaax" "aaay" "aaaz" "aaba" "aabb" "aabc" "aabd"
> mi0n[["abcd"]]
IRanges object with 0 ranges and 0 metadata columns:
       start       end     width
   <integer> <integer> <integer>
> 
> ## This is particularly useful when unlisting an MIndex object:
> unlist(mi0)[1:10]
IRanges object with 10 ranges and 0 metadata columns:
           start       end     width
       <integer> <integer> <integer>
   [1]  16069898  16069922        25
   [2]  16069961  16069985        25
   [3]  16070066  16070090        25
   [4]  16070081  16070105        25
   [5]  16070100  16070124        25
   [6]  16070112  16070136        25
   [7]  16070136  16070160        25
   [8]  16070159  16070183        25
   [9]  16070174  16070198        25
  [10]  16070192  16070216        25
> unlist(mi0n)[1:10]  # keep track of where the matches are coming from
IRanges object with 10 ranges and 0 metadata columns:
           start       end     width
       <integer> <integer> <integer>
  aadu  16069898  16069922        25
  aadv  16069961  16069985        25
  aadw  16070066  16070090        25
  aadx  16070081  16070105        25
  aady  16070100  16070124        25
  aadz  16070112  16070136        25
  aaea  16070136  16070160        25
  aaeb  16070159  16070183        25
  aaec  16070174  16070198        25
  aaed  16070192  16070216        25
> 
> ## ---------------------------------------------------------------------
> ## C. PERFORMANCE
> ## ---------------------------------------------------------------------
> 
> ## If getting the number of matches is what matters only (without
> ## regarding their positions), then countPDict() will be faster,
> ## especially when there is a high number of matches:
> 
> nmatch_per_pat0 <- countPDict(pdict0, chr3R)
> stopifnot(identical(nmatch_per_pat0, nmatch_per_pat))
> 
> if (interactive()) {
+   ## What's the impact of the dictionary width on performance?
+   ## Below is some code that can be used to figure out (will take a long
+   ## time to run). For different widths of the original dictionary, we
+   ## look at:
+   ##   o pptime: preprocessing time (in sec.) i.e. time needed for
+   ##             building the PDict object from the truncated input
+   ##             sequences;
+   ##   o nnodes: nb of nodes in the resulting Aho-Corasick tree;
+   ##   o nupatt: nb of unique truncated input sequences;
+   ##   o matchtime: time (in sec.) needed to find all the matches;
+   ##   o totalcount: total number of matches.
+   getPDictStats <- function(dict, subject)
+   {
+     ans_width <- width(dict[1])
+     ans_pptime <- system.time(pdict <- PDict(dict))[["elapsed"]]
+     pptb <- pdict@threeparts@pptb
+     ans_nnodes <- nnodes(pptb)
+     ans_nupatt <- sum(!duplicated(pdict))
+     ans_matchtime <- system.time(
+                        mi0 <- matchPDict(pdict, subject)
+                      )[["elapsed"]]
+     ans_totalcount <- sum(elementNROWS(mi0))
+     list(
+       width=ans_width,
+       pptime=ans_pptime,
+       nnodes=ans_nnodes,
+       nupatt=ans_nupatt,
+       matchtime=ans_matchtime,
+       totalcount=ans_totalcount
+     )
+   }
+   stats <- lapply(8:25,
+                function(width)
+                    getPDictStats(DNAStringSet(dict0, end=width), chr3R))
+   stats <- data.frame(do.call(rbind, stats))
+   stats
+ }
> 
> ## ---------------------------------------------------------------------
> ## D. USING A NON-PREPROCESSED DICTIONARY
> ## ---------------------------------------------------------------------
> 
> dict3 <- DNAStringSet(mkAllStrings(DNA_BASES, 3))  # all trinucleotides
> dict3
DNAStringSet object of length 64:
     width seq
 [1]     3 AAA
 [2]     3 AAC
 [3]     3 AAG
 [4]     3 AAT
 [5]     3 ACA
 ...   ... ...
[60]     3 TGT
[61]     3 TTA
[62]     3 TTC
[63]     3 TTG
[64]     3 TTT
> pdict3 <- PDict(dict3)
> 
> ## The 3 following calls are equivalent (from faster to slower):
> res3a <- countPDict(pdict3, chr3R)
> res3b <- countPDict(dict3, chr3R)
> res3c <- sapply(dict3,
+              function(pattern) countPattern(pattern, chr3R))
> stopifnot(identical(res3a, res3b))
> stopifnot(identical(res3a, res3c))
> 
> ## One reason for using a non-preprocessed dictionary is to get rid of
> ## all the constraints associated with preprocessing, e.g., when
> ## preprocessing with PDict(), the input dictionary must be DNA and a
> ## Trusted Band must be defined (explicitly or implicitly).
> ## See '?PDict' for more information about these constraints.
> ## In particular, using a non-preprocessed dictionary can be
> ## useful for the kind of inexact matching that can't be achieved
> ## with a PDict object (if performance is not an issue).
> ## See '?`matchPDict-inexact`' for more information about inexact
> ## matching.
> 
> dictD <- xscat(dict3, "N", reverseComplement(dict3))
> 
> ## The 2 following calls are equivalent (from faster to slower):
> resDa <- matchPDict(dictD, chr3R, fixed=FALSE)
> resDb <- sapply(dictD,
+                 function(pattern)
+                   matchPattern(pattern, chr3R, fixed=FALSE))
> stopifnot(all(sapply(seq_len(length(dictD)),
+                      function(i)
+                        identical(resDa[[i]], as(resDb[[i]], "IRanges")))))
> 
> ## A non-preprocessed dictionary can be of any base class i.e. BString,
> ## RNAString, and AAString, in addition to DNAString:
> matchPDict(AAStringSet(c("DARC", "EGH")), AAString("KMFPRNDEGHSTTWTEE"))
MIndex object of length 2
[[1]]
IRanges object with 0 ranges and 0 metadata columns:
       start       end     width
   <integer> <integer> <integer>

[[2]]
IRanges object with 1 range and 0 metadata columns:
          start       end     width
      <integer> <integer> <integer>
  [1]         8        10         3

> 
> ## ---------------------------------------------------------------------
> ## E. vcountPDict()
> ## ---------------------------------------------------------------------
> 
> ## Load Fly upstream sequences (i.e. the sequences 2000 bases upstream of
> ## annotated transcription starts):
> dm3_upstream_filepath <- system.file("extdata",
+                                      "dm3_upstream2000.fa.gz",
+                                      package="Biostrings")
> dm3_upstream <- readDNAStringSet(dm3_upstream_filepath)
> dm3_upstream
DNAStringSet object of length 26454:
        width seq                                           names               
    [1]  2000 GTTGGTGGCCCACCAGTGCCA...CAAGTTTACCGGTTGCACGGT NM_078863_up_2000...
    [2]  2000 TTATTTATGTAGGCGCCCGTT...ATACGGAAAGTCATCCTCGAT NM_001201794_up_2...
    [3]  2000 TTATTTATGTAGGCGCCCGTT...ATACGGAAAGTCATCCTCGAT NM_001201795_up_2...
    [4]  2000 TTATTTATGTAGGCGCCCGTT...ATACGGAAAGTCATCCTCGAT NM_001201796_up_2...
    [5]  2000 TTATTTATGTAGGCGCCCGTT...ATACGGAAAGTCATCCTCGAT NM_001201797_up_2...
    ...   ... ...
[26450]  2000 ATTTACAAGACTAATAAAGAT...AAAATTAAATTTCAATAAAAC NM_001111010_up_2...
[26451]  2000 GATATACGAAGGACGACCTGC...TTGTTTGAGTTGTTATATATT NM_001015258_up_2...
[26452]  2000 GATATACGAAGGACGACCTGC...TTGTTTGAGTTGTTATATATT NM_001110997_up_2...
[26453]  2000 GATATACGAAGGACGACCTGC...TTGTTTGAGTTGTTATATATT NM_001276245_up_2...
[26454]  2000 CGTATGTATTAGTTAACTCTG...TCAAAGTGTAAGAACAAATTG NM_001015497_up_2...
> 
> subject <- dm3_upstream[1:100]
> mat1 <- vcountPDict(pdict0, subject)
> dim(mat1)  # length(pdict0) x length(subject)
[1] 265400    100
> nhit_per_probe <- rowSums(mat1)
> table(nhit_per_probe)
nhit_per_probe
     0      1      2      3      8      9 
265217     82     59     14     14     14 
> 
> ## Without vcountPDict(), 'mat1' could have been computed with:
> mat2 <- sapply(unname(subject), function(x) countPDict(pdict0, x))
> stopifnot(identical(mat1, mat2))
> ## but using vcountPDict() is faster (10x or more, depending of the
> ## average length of the sequences in 'subject').
> 
> if (interactive()) {
+   ## This will fail (with message "allocMatrix: too many elements
+   ## specified") because, on most platforms, vectors and matrices in R
+   ## are limited to 2^31 elements:
+   subject <- dm3_upstream
+   vcountPDict(pdict0, subject)
+   length(pdict0) * length(dm3_upstream)
+   1 * length(pdict0) * length(dm3_upstream)  # > 2^31
+   ## But this will work:
+   nhit_per_seq <- vcountPDict(pdict0, subject, collapse=2)
+   sum(nhit_per_seq >= 1)  # nb of subject sequences with at least 1 hit
+   table(nhit_per_seq)  # max is 74
+   which.max(nhit_per_seq)  # 1133
+   sum(countPDict(pdict0, subject[[1133]]))  # 74
+ }
> 
> ## ---------------------------------------------------------------------
> ## F. RELATIONSHIP BETWEEN vcountPDict(), countPDict() AND
> ## vcountPattern()
> ## ---------------------------------------------------------------------
> subject <- dm3_upstream
> 
> ## The 4 following calls are equivalent (from faster to slower):
> mat3a <- vcountPDict(pdict3, subject)
> mat3b <- vcountPDict(dict3, subject)
> mat3c <- sapply(dict3,
Killed
* checking for unstated dependencies in ‘tests’ ... OK
* checking tests ...
  Running ‘run_unitTests.R’
 OK
* checking for unstated dependencies in vignettes ... OK
* checking package vignettes in ‘inst/doc’ ... OK
* checking running R code from vignettes ...
  ‘Biostrings2Classes.Rnw’ using ‘UTF-8’... OK
  ‘BiostringsQuickOverview.Rnw’ using ‘UTF-8’... OK
  ‘MultipleAlignments.Rnw’ using ‘UTF-8’... OK
  ‘PairwiseAlignments.Rnw’ using ‘UTF-8’... OK
  ‘matchprobes.Rnw’ using ‘UTF-8’... OK
 OK
* checking re-building of vignette outputs ... OK
* checking PDF version of manual ... OK
* DONE

Status: 1 ERROR, 2 WARNINGs, 4 NOTEs
See
  ‘/home/biocbuild/bbs-3.17-bioc/meat/Biostrings.Rcheck/00check.log’
for details.

