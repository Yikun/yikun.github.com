##############################################################################
##############################################################################
###
### Running command:
###
###   /home/biocbuild/bbs-3.17-bioc/R/bin/R CMD check --install=check:SCOPE.install-out.txt --library=/home/biocbuild/bbs-3.17-bioc/R/library --timings SCOPE_1.11.0.tar.gz
###
##############################################################################
##############################################################################


* using log directory ‘/home/biocbuild/bbs-3.17-bioc/meat/SCOPE.Rcheck’
* using R Under development (unstable) (2023-01-14 r83615)
* using platform: aarch64-unknown-linux-gnu (64-bit)
* R was compiled by
    gcc (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0
    GNU Fortran (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0
* running under: Ubuntu 22.04.1 LTS
* using session charset: UTF-8
* checking for file ‘SCOPE/DESCRIPTION’ ... OK
* checking extension type ... Package
* this is package ‘SCOPE’ version ‘1.11.0’
* package encoding: UTF-8
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking for sufficient/correct file permissions ... OK
* checking whether package ‘SCOPE’ can be installed ... OK
* checking installed package size ... OK
* checking package directory ... OK
* checking ‘build’ directory ... OK
* checking DESCRIPTION meta-information ... OK
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking R files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking dependencies in R code ... OK
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... OK
* checking Rd files ... OK
* checking Rd metadata ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... OK
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... OK
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking contents of ‘data’ directory ... OK
* checking data for non-ASCII characters ... OK
* checking LazyData ... OK
* checking data for ASCII and uncompressed saves ... OK
* checking files in ‘vignettes’ ... OK
* checking examples ... ERROR
Running examples in ‘SCOPE-Ex.R’ failed
The error most likely occurred in:

> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: normalize_scope_group
> ### Title: Group-wise normalization of read depth with latent factors using
> ###   Expectation-Maximization algorithm and shared clonal memberships
> ### Aliases: normalize_scope_group
> 
> ### ** Examples
> 
> Gini <- get_gini(Y_sim)
> 
> # first-pass CODEX2 run with no latent factors
> normObj.sim <- normalize_codex2_ns_noK(Y_qc = Y_sim,
+                                         gc_qc = ref_sim$gc,
+                                         norm_index = which(Gini<=0.12))
Computing normalization with no latent factors
Iteration 1	beta diff =0.00882	f(GC) diff =4.28e-07
Iteration 2	beta diff =2.21e-06	f(GC) diff =9.35e-12
Stop at Iteration 2.
> Yhat.noK.sim <- normObj.sim$Yhat
> beta.hat.noK.sim <- normObj.sim$beta.hat
> fGC.hat.noK.sim <- normObj.sim$fGC.hat
> N.sim <- normObj.sim$N
> 
> # Group-wise ploidy initialization
> clones <- c("normal", "tumor1", "normal", "tumor1", "tumor1")
> ploidy.sim.group <- initialize_ploidy_group(Y = Y_sim, Yhat = Yhat.noK.sim, 
+                                 ref = ref_sim, groups = clones)
Initializing ploidy for cell  1 	
 Initialize ploidy by group 
normal 	tumor1 	> ploidy.sim.group
[1] 2.0 2.1 2.0 2.1 2.1
> 
> normObj.scope.sim.group <- normalize_scope_group(Y_qc = Y_sim, 
+                                     gc_qc = ref_sim$gc,
+                                     K = 1, ploidyInt = ploidy.sim.group,
+                                     norm_index = which(clones=="normal"), 
+                                     groups = clones, 
+                                     T = 1:5,
+                                     beta0 = beta.hat.noK.sim)
Initialization ...
normal 	tumor1 	1 	2 	3 	4 	Killed
* checking for unstated dependencies in ‘tests’ ... OK
* checking tests ...
  Running ‘testthat.R’
 OK
* checking for unstated dependencies in vignettes ... OK
* checking package vignettes in ‘inst/doc’ ... OK
* checking running R code from vignettes ...
  ‘SCOPE_vignette.Rmd’ using ‘UTF-8’... OK
 NONE
* checking re-building of vignette outputs ... ERROR
Error(s) in re-building vignettes:
  ...
--- re-building ‘SCOPE_vignette.Rmd’ using rmarkdown
Killed

* checking PDF version of manual ... OK
* DONE

Status: 2 ERRORs
See
  ‘/home/biocbuild/bbs-3.17-bioc/meat/SCOPE.Rcheck/00check.log’
for details.

